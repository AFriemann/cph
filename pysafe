#!/usr/bin/env python
"""Wrapper for psafe to pass passwords to the clipboard."""

from subprocess import Popen, PIPE
from gi.repository import Gtk
import sys
import os
import time
import getpass

HELP_MSG = "pysafe [options] <profile> [key size]"

class EntryDialog(Gtk.Dialog):

    def run(self):
        result = super(EntryDialog, self).run()
        if result == Gtk.ResponseType.OK:
            text = self.entry.get_text()
        else:
            text = None
        return text

    def __init__(self):
        '''
        Creates a new EntryDialog. Takes all the arguments of the usual
        MessageDialog constructor plus one optional named argument 
        "default_value" to specify the initial contents of the entry.
        '''
        super(EntryDialog, self).__init__()
        entry = Gtk.Entry()
        entry.set_visibility(False)
        entry.connect("activate", 
                      lambda ent, dlg, resp: 
                          dlg.response(resp), 
                          self, 
                          Gtk.ResponseType.OK)
        self.vbox.pack_end(entry, True, True, 0)
        self.vbox.show_all()
        self.entry = entry

def get_pwd():
    if sys.stdin.isatty():
        return getpass.getpass()
    else:
        prompt = EntryDialog()
        prompt.connect("destroy", Gtk.main_quit)
        passwd = prompt.run()
        prompt.destroy()
        return passwd 

def text_to_clipboard(text):
    """Parse text to clipboard."""
    Popen(['xsel', '-pi'], stdin=PIPE).communicate(text)

def clear_clipboard():
    """Delete clipboard contents."""
    Popen(['xsel', '-d'])

def main(argv):
    """pysafe main method"""
    argc = len(argv)
    if argc < 1 or argc > 2:
        print(HELP_MSG)
        sys.exit(1)

    for opt in argv:
        if opt in ("-h", "--help"):
            print(HELP_MSG)
            sys.exit()

    profile = argv[0]
    pwd = get_pwd()

    if pwd is None:
        print(HELP_MSG)
        sys.exit()

    if argc == 2:
        key_size = argv[1]
        psafe_call = ['./psafe', profile, pwd, key_size]
    else:
        psafe_call = ['./psafe', profile, pwd]
      
    # run psafe and save output
    process = Popen(psafe_call, shell=False, stdout=PIPE,
        stderr=PIPE)

    out, err = process.communicate()

    # if stderr not empty, exit and print errors
    if not err:
        text_to_clipboard(out)
    else:
        print(err.decode("utf-8"))
        sys.exit(1)

    # now fork and sleep!
    if os.fork():
        sys.exit()

    time.sleep(10)

    clear_clipboard()

    sys.exit(0)


if  __name__ =='__main__':
    main(sys.argv[1:])

